---
title: "Class 9: Statistical Analysis - ANOVA"
execute:
  echo: true
  eval: true
  message: false
  warning: false
---

```{r}
#| echo: false
#| eval: true

source(here::here("prerender.R"))

```

This class will cover how to perform various t-tests and ANOVAs in R and ways of generating tables and figures from the models.

# Setup an R Project

Create an R Project (if you don't have one already for this course) with at least a **data** folder

üìÅ analyses

üìÅ data

# Setup Quarto Document

To follow along, you should create an empty Quarto document for this class.

## YAML

```         
---
title: "Document Title"
author: Your Name
date: today
theme: default
format:
  html:
    code-fold: true
    code-tools: true
    code-link: true
    toc: true
    toc-depth: 1
    toc-location: left
    page-layout: full
    df-print: paged
execute:
  error: true
  warning: true
self-contained: true
editor_options: 
  chunk_output_type: console
---
```

## Headers

1.  Create a level 1 header for a Setup section to load packages and set some theme options:

```         
# Setup
```

2.  Create a level 2 header to load packages

```         
## Required Packages
```

3.  Create another level 2 header where we can set a `ggplot2` theme

```         
## Plot Theme
```

## R Code Chunks

4.  Add an R code chunk below the **Required Packages** header and load the following packages,

```{r}
library(here)
library(readr)
library(dplyr)
library(stringr)
library(ggplot2)
library(afex)
library(parameters)
library(effectsize)
library(modelbased)
library(sjPlot)
library(ggeffects)
library(modeloutput)
```

5.  Add an R code chunk below the **Plot Theme** header and set your own `ggplot2` theme to automatically be used in the rest of the document.

In this example I am using the `theme_classic()` settings in addition to **bolding** the title elements. This custom theme will now automatically be applied to all `ggplot2` objects by using `theme_set()`

```{r}
custom_theme <- theme_classic() +
  theme(axis.title.x = element_text(face = "bold"),
        axis.title.y = element_text(face = "bold"),
        legend.title = element_text(face = "bold"),
        plot.title = element_text(face = "bold"))

theme_set(custom_theme)
```

# Example Data Set

> Suppose we were interested in memory and wanted to find out if recall can be improved by using visual imagery while memorizing a list of words. In addition to the memory strategy that is used, say we were also interested in the effect presentation rate on memory and if that interacted with memory strategy.
>
> To investigate this, we conducted an experiment to look at the effect of **Memory Strategy** and **Presentation Rate** on **Recall Performance** using a 2 x 3 mixed-factorial design with Memory Strategy as a between-subjects factor (**Rote Repetition** vs. **Visual Imagery**) and Presentation Rate as a within-subjects factor (**1 second**, **2 seconds**, and **4 seconds**).
>
> In every condition subjects were told to use a certain strategy while memorizing a list of 50 words presented sequentially and were asked to freely recall as many words as possible immediately after the last presented word. Every subject performed the memory task three times at the 3 different presentation rates, the order of the tasks was counterbalanced.

You can download the data for this hypothetical experiment and save it in your **data** folder:

‚¨áÔ∏è <a href="/data/Recall_Data.csv" download="Recall_Data.csv">Recall_Data.csv</a>

# Import Data

1.  Create a level 1 header for importing and getting the data ready for statistical analysis

```         
# Data
```

2.  Create a tabset with a tab to import the data and another tab to get the data ready

You can add multiple tabs easily by going to

> In the toolbar: Insert -\> Tabset...

```         
::: panel-tabset
## Import Data

## Get Data Ready for Models

:::
```

3.  Create an R code chunk below the **Import Data** tab header

```{r}
data_import <- read_csv(here("data", "Recall_Data.csv"))
```

```{r}
#| echo: false

data_import

```

## Specify Factor Levels

When dealing with categorical variables for statistical analyses in R, it is usually a good idea to define the order of the categories as this will by default determine which category is treated as the reference (comparison group).

Let's set factor levels for **Memory Strategy** and **Presentation Rate**

*Remember you can use* `colnames()` *to get the columns in a data frame and* `unique()` *to evaluate the unique values in a column.*

4.  Create an R code chunk below the **Get Data Ready for Models** tab header

```{r}
recall_data <- data_import |>
  mutate(Memory_Strategy = factor(Memory_Strategy,
                                    levels = c("Rote Repetition", 
                                               "Visual Imagery")),
         Presentation_Rate = factor(Presentation_Rate,
                                    levels = c(1, 2, 4)))
```

::: callout-note
From here on out you can create your own header and tabsets as you see fit
:::

# t-test

A *t*-test can be performed to test whether a **difference between 2 means** is statistically significant. There are three general types of *t*-tests.

-   **One-sample *t*-test**: Used to compare a sample mean to a population mean.

-   **Two-sample *t*-test for independent samples**: Used to compare means from two different groups of subjects (between-subject factor).

-   **Two-sample *t*-test for dependent samples**: Used to compare means from two conditions with the same subjects (within-subject factor).

The `t.test()` function can be used to compute any of these *t*-tests.

## t-test - independent samples

We can perform a two-sample *t*-test for independent samples to compare recall performance for the group of subjects assigned to the rote repetition condition vs. those assigned to the visual imagery condition.

```{r}
t_ms <- t.test(recall_data$Recall_Performance ~
                 recall_data$Memory_Strategy, 
               var.equal = TRUE)
```

The default way to print output from statistical models in R is either by using a `summary()` function, or simply printing the statistical model object, `t_ms` , to the console:

::: panel-tabset
## R output

```{r}
t_ms
```

## Table ouptut

We can use `model_parameters()` , from `parameters`, to get the test statistics and `cohens_d()`, from `effectsize` to get the standardized effect size estimates and print a nice looking table using `display` from the `parameters` package.

```{r}
model_parameters(t_ms) |>
  display(align = "left")
```

<br>

```{r}
cohens_d(t_ms) |>
  display(align = "left")
```
:::

## t-test - dependent samples

We can perform a two-sample *t*-test for dependent samples to compare the three presentation rate conditions because this variable was a within-subject factor.

To do so, we need to create three different data frames for each of the pairwise comparisons (there might be a simpler way to do this using a different t-test function). We can use `filter()` from `dplyr` to do this.

```{r}
data_pr_1v2 <- filter(recall_data, 
                      Presentation_Rate == 1 | Presentation_Rate == 2)

data_pr_1v4 <- filter(recall_data, 
                      Presentation_Rate == 1 | Presentation_Rate == 4)

data_pr_2v4 <- filter(recall_data, 
                      Presentation_Rate == 2 | Presentation_Rate == 4)

t_pr_1v2 <- t.test(data_pr_1v2$Recall_Performance ~
                     data_pr_1v2$Presentation_Rate, 
                   var.equal = TRUE, paired = TRUE)

t_pr_1v4 <- t.test(data_pr_1v4$Recall_Performance ~
                     data_pr_1v4$Presentation_Rate, 
                   var.equal = TRUE, paired = TRUE)

t_pr_2v4 <- t.test(data_pr_2v4$Recall_Performance ~
                     data_pr_2v4$Presentation_Rate, 
                   var.equal = TRUE, paired = TRUE)
```

::: panel-tabset
## R output

```{r}
t_pr_1v2
t_pr_1v4
t_pr_2v4
```

## Table ouptut

We can use `model_parameters()` , from `parameters`, to get the test statistics and `cohens_d()`, from `modelbased` to get the standardized effect size estimates and print a nice looking table using `display` from the `parameters` package.

```{r}
model_parameters(t_pr_1v2) |> 
  display(align = "left")

model_parameters(t_pr_1v4) |> 
  display(align = "left")

model_parameters(t_pr_2v4) |> 
  display(align = "left")
```

<br>

```{r}
cohens_d(t_pr_1v2) |>
  display(align = "left")

cohens_d(t_pr_1v4) |>
  display(align = "left")

cohens_d(t_pr_2v4) |>
  display(align = "left")
```
:::

# ANOVA

Depending on your factor design, you may need to perform different types of ANOVAs. We have a 2 x 3 mixed-factorial design and so will ultimately want to perform a Two-way ANOVA with a between-subject and a within-subject factors. However, for the sake of this exercise, let's walk through different types of ANOVAs.

-   Between-subjects ANOVA

-   Within-subjects ANOVA (also called repeated-measures ANOVA)

-   Mixed-factor ANOVA

In R, there are some different ways to conduct an ANOVA. We will use the `afex` package to conduct ANOVAs with `aov_car()`.

# Between-Subjects ANOVA

A between-subjects ANOVA is conducted when there are only between-subject factors in the study design.

First let's reduce our data frame by aggregating over the within-subjects factor (pretend that we only have a between-subjects design).

```{r}
data_model <- recall_data |>
  summarise(.by = c(Subject, Memory_Strategy),
            Recall_Performance = mean(Recall_Performance, na.rm = TRUE))
```

```{r}
#| echo: false

data_model

```

Model

```{r}
anova_bs <- aov_car(Recall_Performance ~ 
                      Memory_Strategy + Error(Subject),
                    data = data_model)
```

The `Error(Subject)` syntax in the formula tells `aov_car()` what column name contains subject ids.

## Tables

View the different tabs to see different output options:

::: panel-tabset
## R output

```{r}
anova_bs
```

## easystats

You can use `model_parameters()` to get an ANOVA table. You should specify `type = 3` to get Type III sum of squares. You can also request to obtain omega-squared (or eta-squared) effect size estimate.

```{r}
model_parameters(anova_bs, type = 3, 
                 effectsize_type = "omega", 
                 ci = .95) |>
  display(align = "left")
```

You can use `estimate_contrasts()`, from `modelbased`, to get post-hoc comparisons.

```{r}
estimate_contrasts(anova_bs, 
                   contrast = "Memory_Strategy", 
                   p_adjust = "tukey") |>
  display(align = "left")
```

## modeloutput

My `modeloutput` package provides a way to display ANOVA tables in output format similar to other statistical software packages like JASP or SPSS. Add `anova_tables(contrast = "Memory_Strategy")` to get a table for post-hoc comparisons.

```{r}
anova_tables(anova_bs, contrast = "Memory_Strategy")
```
:::

## Figures

View the different tabs to see different output options:

::: panel-tabset
## sjPlot

The main package in R to create and customize plots is `ggplot2`. However, there is definitely a bit of a learning curve to `ggplot2`. Instead, the `sjPlot` package offers convenient ways to plot the results of statistical analyses using `plot_model()`.

```{r}
plot_model(anova_bs, type = "pred", show.data = TRUE, jitter = TRUE)
```

`plot_model()` actually generates a `ggplot2` object so you can further modify using `ggplot2` code.

## ggplot2

The most customizable way to plot model results is using the `ggplot2` package.

```{r}
ggplot(recall_data, aes(x = Memory_Strategy, 
                        y = Recall_Performance,
                        color = Memory_Strategy)) +
  geom_point(position = position_jitter(width = .1), alpha = .2) +
  geom_point(stat = "summary", fun = mean, size = 3) + 
  geom_errorbar(stat = "summary", 
                fun.data = mean_cl_normal, width = .1) +
  labs(x = "Memory Strategy", y = "Recall Performance") +
  scale_color_brewer(palette = "Set1") +
  guides(color = "none")
```

## ggplot2 + modeloutput

My `modeloutput` function has a `geom_flat_violin()` function to create the cloud part of the raincloud plot. There are some other modifications that have to be made to other elements of the ggplot as well.

```{r}
ggplot(recall_data, aes(x = Memory_Strategy, 
                        y = Recall_Performance,
                        color = Memory_Strategy, 
                        fill = Memory_Strategy)) +
  geom_flat_violin(position = position_nudge(x = .1, y = 0),
                   adjust = 1.5, trim = FALSE, 
                   alpha = .5, colour = NA) +
  geom_point(aes(as.numeric(Memory_Strategy) - .15), 
             position = position_jitter(width = .05), alpha = .2) +
  geom_point(stat = "summary", fun = mean, size = 3) + 
  geom_errorbar(stat = "summary", 
                fun.data = mean_cl_normal, width = .1) +
  labs(x = "Memory Strategy", y = "Recall Performance") +
  scale_color_brewer(palette = "Set1") +
  scale_fill_brewer(palette = "Set1") +
  guides(fill = "none", color = "none")
```
:::

# Within-Subjects ANOVA

A within-subjects ANOVA (or repeated-measures ANOVA) is conducted when there is only a within-subjects factor in the study design.

First let's reduce our data frame by aggregating over the between-subjects factor (pretend that we only have a within-subjects design).

```{r}
data_model <- recall_data |>
  summarise(.by = c(Subject, Presentation_Rate),
            Recall_Performance = mean(Recall_Performance, na.rm = TRUE))
```

```{r}
#| echo: false

data_model

```

Statistically, the main difference between a between-subject factor and a within-subject factor is what goes into the error term. Recall that within-subject factor designs are more powerful. One reason for this is that the Error or Residual term in the model becomes smaller because `Subject` gets entered into the model as a variable (we are modelling the effect of differences between subjects). We need to specify the structure of the residual term for within-subject designs.

In `aov_car()` we can specify the error term as `Error(Subject/Within-Subject Factor)`.

Model

```{r}
anova_ws <- aov_car(Recall_Performance ~ Presentation_Rate + 
                      Error(Subject/Presentation_Rate),
                    data = recall_data)
```

## Tables

View the different tabs to see different output options:

::: panel-tabset
## R output

```{r}
anova_ws
```

## easystats

You can use `model_parameters()` to get an ANOVA table. You should specify `type = 3` to get Type III sum of squares. You can also request to obtain omega-squared (or eta-squared) effect size estimate.

```{r}
model_parameters(anova_ws, type = 3, 
                 effectsize_type = "omega", 
                 ci = .95) |>
  display(align = "left")
```

You can use `estimate_contrasts()`, from `modelbased`, to get post-hoc comparisons.

```{r}
estimate_contrasts(anova_ws, 
                   contrast = "Presentation_Rate", 
                   p_adjust = "bonferroni") |>
  display(align = "left")
```

## modeloutput

My `modeloutput` package provides a way to display ANOVA tables in output format similar to other statistical software packages like JASP or SPSS. Add `anova_tables(contrast = "Presentation_Rate")` to get a table for post-hoc comparisons.

```{r}
anova_tables(anova_ws, contrast = "Presentation_Rate")
```
:::

## Figures

View the different tabs to see different output options:

::: panel-tabset
## sjPlot

The main package in R to create and customize plots is `ggplot2`. However, there is definitely a bit of a learning curve to `ggplot2`. Instead, the `sjPlot` package offers convenient ways to plot the results of statistical analyses using `plot_model()`.

```{r}
plot_model(anova_ws, type = "pred", show.data = TRUE, jitter = TRUE)
```

`plot_model()` actually generates a `ggplot2` object so you can further modify using `ggplot2` code.

## ggplot2

The most customizable way to plot model results is using the `ggplot2` package.

```{r}
ggplot(recall_data, aes(x = Presentation_Rate, 
                        y = Recall_Performance)) +
  geom_point(position = position_jitter(width = .1), alpha = .2) +
  geom_line(stat = "summary", fun = mean, linewidth = 1, group = 1) +
  geom_point(stat = "summary", fun = mean, size = 3) + 
  geom_errorbar(stat = "summary", 
                fun.data = mean_cl_normal, width = .1) +
  labs(x = "Presentation Rate", y = "Recall Performance")
```

## ggplot2 + modeloutput

My `modeloutput` function has a `geom_flat_violin()` function to create the cloud part of the raincloud plot. There are some other modifications that have to be made to other elements of the ggplot as well.

```{r}
ggplot(recall_data, aes(x = Presentation_Rate, 
                        y = Recall_Performance)) +
  geom_flat_violin(position = position_nudge(x = .1, y = 0),
                   adjust = 1.5, trim = FALSE, 
                   alpha = .5, fill = "gray", color = NA) +
  geom_point(aes(as.numeric(Presentation_Rate) - .15), 
             position = position_jitter(width = .05), alpha = .2) +
  geom_line(stat = "summary", fun = mean, linewidth = 1, group = 1) +
  geom_point(stat = "summary", fun = mean, size = 3) + 
  geom_errorbar(stat = "summary", 
                fun.data = mean_cl_normal, width = .1) +
  labs(x = "Presentation_Rate", y = "Recall Performance")
```
:::

# Mixed-Factors ANOVA

A Mixed-Factors ANOVA is conducted when you have between and within-subject factors in your design. In the case of the data we are working with here we have a Two-way mixed-factors ANOVA; or a 2 x 3 mixed-factors ANOVA.

The setup for this is very similar but we need to specify an interaction term between the two factors. There are two different ways to do this:

1.  Specify each main effect and interaction terms separately

```{r}
#| eval: false

Presentation_Rate + Memory_Strategy + Presentation_Rate:Memory_Strategy

```

2.  Use a shorthand that includes all main effects and the interaction term

```{r}
#| eval: false

Presentation_Rate*Memory_Strategy

```

Model

```{r}
anova_mixed <- aov_car(Recall_Performance ~ 
                         Presentation_Rate*Memory_Strategy + 
                         Error(Subject/Presentation_Rate),
                       data = recall_data)
```

## Tables

View the different tabs to see different output options:

::: panel-tabset
## R output

```{r}
anova_mixed
```

## easystats

You can use `model_parameters()` to get an ANOVA table. You should specify `type = 3` to get Type III sum of squares. You can also request to obtain omega-squared (or eta-squared) effect size estimate.

```{r}
model_parameters(anova_mixed, type = 3, 
                 effectsize_type = "omega", 
                 ci = .95) |>
  display(align = "left")
```

You can use `estimate_contrasts()`, from `modelbased`, to get post-hoc comparisons.

```{r}
estimate_contrasts(anova_mixed, 
                   contrast = "Presentation_Rate", 
                   at = "Memory_Strategy",
                   p_adjust = "bonferroni") |>
  display(align = "left")
```

## modeloutput

My `modeloutput` package provides a way to display ANOVA tables in output format similar to other statistical software packages like JASP or SPSS. Add `anova_tables(contrast = "Presentation_Rate")` to get a table for post-hoc comparisons.

```{r}
anova_tables(anova_mixed, 
             contrast = c("Presentation_Rate", "Memory_Strategy"), 
             at = c("Presentation_Rate", "Memory_Strategy"))
```
:::

## Figures

View the different tabs to see different output options:

::: panel-tabset
## sjPlot

The main package in R to create and customize plots is `ggplot2`. However, there is definitely a bit of a learning curve to `ggplot2`. Instead, the `sjPlot` package offers convenient ways to plot the results of statistical analyses using `plot_model()`.

```{r}
plot_model(anova_mixed, type = "int", show.data = TRUE, jitter = TRUE)
```

`plot_model()` actually generates a `ggplot2` object so you can further modify using `ggplot2` code.

## ggplot2

The most customizable way to plot model results is using the `ggplot2` package.

```{r}
ggplot(recall_data, aes(x = Presentation_Rate, 
                        y = Recall_Performance,
                        color = Memory_Strategy, 
                        group = Memory_Strategy)) +
  geom_point(position = position_jitter(width = .1), alpha = .2) +
  geom_line(stat = "summary", fun = mean, linewidth = 1) +
  geom_point(stat = "summary", fun = mean, size = 3) + 
  geom_errorbar(stat = "summary",
                fun.data = mean_cl_normal, width = .1) +
  labs(x = "Presentation Rate", y = "Recall Performance") +
  scale_color_brewer(palette = "Set1", name = "Memory Strategy")
```

## ggplot2 + modeloutput

My `modeloutput` function has a `geom_flat_violin()` function to create the cloud part of the raincloud plot. There are some other modifications that have to be made to other elements of the ggplot as well.

```{r}
ggplot(recall_data, aes(x = Presentation_Rate, 
                        y = Recall_Performance,
                        color = Memory_Strategy, 
                        fill = Memory_Strategy)) +
  geom_flat_violin(aes(fill = Memory_Strategy),
                   position = position_nudge(x = .1, y = 0),
                   adjust = 1.5, trim = FALSE, 
                   alpha = .5, colour = NA) +
  geom_point(aes(as.numeric(Presentation_Rate) - .15), 
             position = position_jitter(width = .05), alpha = .2) +
  geom_line(aes(group = Memory_Strategy), 
            stat = "summary", fun = mean, size = 1) +
  geom_point(stat = "summary", fun = mean, size = 3) + 
  geom_errorbar(stat = "summary", 
                fun.data = mean_cl_normal, width = .1) +
  labs(x = "Presentation_Rate", y = "Recall Performance") +
  scale_color_brewer(palette = "Set1", name = "Memory Strategy") +
  scale_fill_brewer(palette = "Set1") +
  guides(fill = "none")
```

## ggeffects + ggplot2

```{r}
model_plot <- anova_mixed |>
  ggemmeans(terms = c("Presentation_Rate",
                      "Memory_Strategy")) |>
  rename(Presentation_Rate = x, Memory_Strategy = group, 
         Recall_Performance = predicted) |>
  mutate(Presentation_Rate = str_remove(Presentation_Rate, "X"),
         Memory_Strategy = factor(Memory_Strategy,
                                    levels = c("Rote Repetition", 
                                               "Visual Imagery")))
```

```{r}
#| echo: false

model_plot

```

```{r}
ggplot(model_plot, aes(x = Presentation_Rate, 
                       y = Recall_Performance,
                       color = Memory_Strategy, 
                       group = Memory_Strategy)) +
  geom_point(data = recall_data,
             position = position_jitter(width = .1), alpha = .2) +
  geom_line(linewidth = 1) +
  geom_point(size = 3) + 
  geom_errorbar(aes(ymin = conf.low, ymax = conf.high), width = .1) +
  labs(x = "Presentation Rate", y = "Recall Performance") +
  scale_color_brewer(palette = "Set1", name = "Memory Strategy")
```
:::
